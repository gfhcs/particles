Util.ParallelPrefixSum: Das ist alles in Ordnung so weit. Ich will aber noch überprüfen, ob man die Parallelität nicht noch erhöhen kann.
    --> Stoppe die Zeit für den ersten Parallel-Aufruf und den zweiten Parallel-Aufruf. Ich will sehen, wie sie sich unterscheiden. Vielleicht erzeugt die Parallelisierung irgendwo unnötigen Overhead...
OctreeTests debuggen: Wir haben Tasks aus MortonOctree eliminiert und die Compaction optimiert. Jetzt ist natürlich ein bischen was kaputt...
SimulationTests laufen lassen und Phänomene überprüfen:
    TestCloud1: Why the fuck is memory suddenly exploding?! Should this test really take that long?
    TestEarthMoon: Too much memory consumption. And why is that memory kept while the video is played?
DocString: "A spatial index is a data structure that allows to efficiently find objects that are at or close to a given position in space."
--> Vielleicht sollte man ISpatialIndex doch lieber zu einer abstrakten Klasse machen. Dann könnte man virtuelle Methoden zum Traversieren des Index bereitstellen. Und es ist unwahrscheinlich, dass ein spatial index noch von anderen Basisklassen erben will...
Make BallCloudGradient use Octree.
Optimization: Can one have symmetric Barnes-Hut? I.e. can we also *write* the gravity exercised on a whole cluster?
Optimizaton: Parallelize Barnes-Hut
Optimization: Simulation mit Tasks parallelisieren
    Wir wollen weiterhin die Symmetrie der Graviation ausnutzen. Idee:
    Wähle eine Zahl k minimal, so dass (k * k + k) / 2 >= P, wobei P die Anzahl der Prozessoren ist. Unterteile dann die Teilchen in k Blöcke.
    Diese Blöcke wechselwirken miteinander (und auch jeweils mit sich selbst). Die P Prozessoren sollen jeweils möglichst gleich viele dieser Wechselwirkungspaare verarbeiten.
    Das Ergebnis für ein Wechselwirkungspaar wird immer vorzeichenbehaftet an die beiden betroffenen Blöcke verschickt. Ergebnisse, die an einen Block geschickt werden, sollen zügig zusammengefügt werden.

    Wir teilen die Teilchen in Blöcke ein: Ein Block pro Prozessor.
    Innerhalb eines jeden Blocks werden alle Wechselwirkungen berechnet.
    Der i-te Block hat i - 1 Fremdblöcke, in die andere Prozessoren Wechselwirkungen ihres Blocks mit dem i-ten eintragen können.
    
Optimization: Embedded Runge-Kutta
Optimization: Separate step sizes for each particle
Implement symplectic integrators and create test cases for them. See English Wikipedia page.
Renderer-Klassen einführen. Für Renderer braucht man Cameras. Achtung: Auch Renderer werden mal mit Tasks arbeiten müssen!
    --> Eine Camera mappt States auf Frames. Ein Renderer bekommt eine Sequenz von States und produziert daraus ein Video.
    --> Außerdem sollte es so etwas wie einen State-Buffer geben, damit die Simulation schon weitere Schritte berechnen kann, während der Renderer noch rendert. 
    --> Und ich will in der Lage sein, State-Sequenzen auf die Platte zu serialisieren!
Artwork: Background images, colors, stats, sound (music, noise, collisions)
Partikel abstrahieren: Man will mit Arrays von Partikeln arbeiten, die sich mit Eigenschaften und Kräften erweitern lassen!
    --> Ich glaube, eine gute Idee wäre es, eine abstrakte Klasse ParticleCloud einzuführen. Erben können dieser dann Arrays hinzufügen. Das ginge z.B. mit Property-Objekten (Farbe, Ladung, Masse, ...) und Force-Objekten (Gravity, Coulomb, ...)
How about chain reactions, e.g. nuclear fission. That would be a lot of fun!
How about billards?
Chemical reactions?
Volcanic eruption?
Tsunami?
Am liebsten würde ich jetzt dafür sorgen, dass Tasks auch übers Netzwerk verteilt werden...
Und dann würde man Tasks auch gerne noch auf die GPU auslagern.
 
