BallCloudRenderer: Factor out position mapping (from world space to image space) and then create a subclass that computes an octree for the current frame and renders it. Most interesting would be to have a mask over the particles that tells it to only expand Octree volumes in which activated particles are present. This should result in a very interesting video as particles move around. Do not parallelize at first! This is mostly for debugging and probably efficient enough anyway. We should do it in parallel to the rendering of the balls, though.
MortonOctree: Add a threshold on the number of objects under a node: If a node has less than the given number of objects under it, it should not have any child nodes anymore
    --> Avoids unnecessary memory overhead and jumping around in memory for small bunches of particles
    --> This creates another reason why a node should mark potential child nodes as "unused" during construction.
Make a profiling run of some big simulation case. Where do we spent most of our time?
DocString: "A spatial index is a data structure that allows to efficiently find objects that are at or close to a given position in space."
    --> Vielleicht sollte man ISpatialIndex doch lieber zu einer abstrakten Klasse machen. Dann könnte man virtuelle Methoden zum Traversieren des Index bereitstellen. Und es ist unwahrscheinlich, dass ein spatial index noch von anderen Basisklassen erben will...
Make BallCloudGradient use Octree. Use the Wikipedia article about Barnes-Hut!
    Insight:
        1. During Morton tree construction it is easy to identify the parent of each node and store it for quick retrieval.
        2. We could force every spatial index tree structure to give access to the parent of a node.
        3. With information about the node parents, it is very easy to partition the whole tree into tasks: Partition the leaves and make tasks follow the parent relation.
Optimization: Can one have symmetric Barnes-Hut? I.e. can we also *write* the gravity exercised on a whole cluster?
Optimizaton: Parallelize Barnes-Hut
Optimization: Simulation parallelisieren
    Wir wollen weiterhin die Symmetrie der Graviation ausnutzen. Idee:
    Wähle eine Zahl k minimal, so dass (k * k + k) / 2 >= P, wobei P die Anzahl der Prozessoren ist. Unterteile dann die Teilchen in k Blöcke.
    Diese Blöcke wechselwirken miteinander (und auch jeweils mit sich selbst). Die P Prozessoren sollen jeweils möglichst gleich viele dieser Wechselwirkungspaare verarbeiten.
    Das Ergebnis für ein Wechselwirkungspaar wird immer vorzeichenbehaftet an die beiden betroffenen Blöcke verschickt. Ergebnisse, die an einen Block geschickt werden, sollen zügig zusammengefügt werden.

    Wir teilen die Teilchen in Blöcke ein: Ein Block pro Prozessor.
    Innerhalb eines jeden Blocks werden alle Wechselwirkungen berechnet.
    Der i-te Block hat i - 1 Fremdblöcke, in die andere Prozessoren Wechselwirkungen ihres Blocks mit dem i-ten eintragen können.
    
Optimization: Embedded Runge-Kutta
Optimization: Separate step sizes for each particle
Implement symplectic integrators and create test cases for them. See English Wikipedia page.
Renderer-Klassen einführen. Für Renderer braucht man Cameras. Achtung: Auch Renderer werden mal mit Tasks arbeiten müssen!
    --> Eine Camera mappt States auf Frames. Ein Renderer bekommt eine Sequenz von States und produziert daraus ein Video.
    --> Außerdem sollte es so etwas wie einen State-Buffer geben, damit die Simulation schon weitere Schritte berechnen kann, während der Renderer noch rendert. 
    --> Und ich will in der Lage sein, State-Sequenzen auf die Platte zu serialisieren!
Artwork: Background images, colors, stats, sound (music, noise, collisions)
Partikel abstrahieren: Man will mit Arrays von Partikeln arbeiten, die sich mit Eigenschaften und Kräften erweitern lassen!
    --> Ich glaube, eine gute Idee wäre es, eine abstrakte Klasse ParticleCloud einzuführen. Erben können dieser dann Arrays hinzufügen. Das ginge z.B. mit Property-Objekten (Farbe, Ladung, Masse, ...) und Force-Objekten (Gravity, Coulomb, ...)
How about chain reactions, e.g. nuclear fission. That would be a lot of fun!
How about billards?
Chemical reactions?
Volcanic eruption?
Tsunami?
Am liebsten würde ich jetzt dafür sorgen, dass Tasks auch übers Netzwerk verteilt werden...
Und dann würde man Tasks auch gerne noch auf die GPU auslagern.
 
